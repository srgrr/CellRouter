#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <set>
#include "utils.h"
#include <random>

/*
  A variable is a struct that contains the following information:
  - Coordinates
  - Net
*/
struct variable {
  std::vector< int > coords;
  int net;
  variable() {
    coords = std::vector< int >();
    net = -1;
  }

  variable(std::vector< int > c, int n) {
    coords = c;
    net = n;
  }

  friend bool operator<(const variable& a, const variable& b) {
    if(a.coords != b.coords) {
      return a.coords < b.coords;
    }
    return a.net < b.net;
  }
};

/*
  An instance is a struct that contains the following information:
  - Number of dimensions
  - Number of nets
  - Dimension boundaries for each point
  - Source-Sink pairs
  - A set of valid point-net pairs (randomly generated by the R-L algo)
*/
struct instance {
  int num_dims, num_nets;
  std::vector< int > dim_sizes;
  std::vector< std::vector< std::vector< int > > > points;
  std::set< variable > allowed_variables;

  instance() {
    dim_sizes = std::vector< int >();
    points = std::vector< std::vector< std::vector< int > > >();
    allowed_variables = std::set< variable >();
  }

  void summary(std::ostream& out) {
    out << "Num dims: " << num_dims << std::endl;
    out << "Num nets: " << num_nets << std::endl;
    int total_variables = num_nets;
    for(int dim : dim_sizes) {
      total_variables *= dim;
    }
    out << "Total variables: " << total_variables << std::endl;
    out << "Allowed variables: " << allowed_variables.size() << std::endl;
    out << "Ratio: "
    << double(allowed_variables.size()) / double(total_variables) << std::endl;
  }

};

/*
  Parses an input file, applies the R-L algorithm to it, and returns
  an instance
*/
instance parse_input(std::ifstream&);
